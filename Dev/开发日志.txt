todolist：
当登录页面时，也会创建用户名为空的数据库。【跟踪，暂未发现原因】
----------------

--------------低优先级---------------------------------
【关注】连接使用结束后，没有关闭
1、mod_lessFiveCard 显示已激活和已隐藏的卡片 应当可配置
	卡片状态已经保存在csj db中，只需要解决显示问题即可
2、增加依赖机制提醒,通过程序来控制各mod之间的依赖关系
3、在option页面，增加本地用户全部清除命令【优先级低】
4、战斗报表
5、选项：使用内置数据
6、mod模块显示排序
6、新增：商店卡片排序功能【低优先级】
--------------使用建议---------------------------------
1、最好到卡片收集区收集一下卡片基础信息
2、合成卡片出现-1的情况是说明展示没有获取到该卡片的数量信息
checklist：
1、创建mod目录
2、创建mod配置信息，bg-conf
3、创建mod文件
4、调整pop文件
5、调整csj文件
csj脚本自动执行的时机
1、脚本载入时
2、被其他脚本调用时，如lessfive，
3、不自动执行，等到pop页面调用
==============================================================
开发日志20150226
1、完成：卡片收集区的数据存储入口 #active_cards>div[data-rank=CRAFT]
2、完成：增加拥有的合成卡片数量
3、完成：删除本地用户的数据，需要确认
4、：用户禁用数据库
todo：
==============================================================
开发日志20150225
1、完成：修改计算cp
2、完成：获取卡片数量
3、完成：csj db version升级至2
4、完成：csj数据结构获取变更
==============================================================
开发日志20150217
1、重构pop js
2、修改合成卡片在商业页面的存储逻辑，craftId应该是没有必要的。
3、增加卡片收集区的卡片信息获取逻辑
==============================================================
开发日志20150216
1、完成：pop_devMode的数据删除功能
2、完成：mod功能停用后，清空mod数据
3、完成：所有其他模块的数据存储的重构
4、完成：开发者模式，控制数据对象操作div显示
==============================================================
开发日志20150215
完成：main-data.js增加按照用户来建立数据功能
完成：修改pop_dev功能
设计：csj的db是否应该按照登录用户来创建数据库呢？从而避免数据库version收到登录用户的影响
设计：数据库加入用户名，在用户登录时初始化csj数据库
设计：增加用户删除用户数据库操作
设计：禁止删除数据库OS操作，改为清空
==============================================================
开发日志20150213
修改设计
==============================================================
开发日志20150122
完成：所有csj脚本的数据存储功能的重构，使用了Tool_connModDB 替换了原有的Tool_getDB方法，方法注释。
设计：数据库的配置统一集中到bgconf中，增加version，并在main-data中统一触发版本更新工作
设计：数据库的获取连接 通用化
设计：数据库的结构更新统一化
完成：记事本textarea的长宽
设计：数据库的os对象创建，和update需要统一化么？
完成：数据库连接是否方便，现在按照mod名称来获得数据库连接
完成：载入页面的时候，获取mod的数据库配置，调用bf的服务，收到数据回调。
完成：pop_devMode删除对应的用户数据,移到main-data脚本中，port:main_data
==============================================================
开发日志20150121
2、重构各个mod模组的数据库初始化动作
完成：自动检测功能，如果配置项被关闭，则自动清除本地缓存数据||设计：如果mod功能关闭，自动删除相应的数据库
完成：选项界面，增加全部启动，全部停用功能
==============================================================
开发日志20150119
1、csj数据库的维护功能
完成：给bg-conf中 每个mode增加的对应的数据库配置
完成：在pop框架中，增加了插件数据维护功能，随着devMode数值变化
完成: 完成pop_devMode页面，本地数据库维护功能，增加全部删除功能。
==============================================================
进入到alpha测试
==============================================================
开发日志20150115
1、完成：拾取物品的时候，应当拾取lootitem
5、完成：背包数据的删除处理，采用删除，重新更新的方式解决
4、完成：监控材料页面的背包数量和空间
4、完成：监控材料页面的拾取功能
==============================================================
开发日志20150112
4、完成：获取背包数量
5、修正：合成商店完成百分比 修正为百分之一。
==============================================================
开发日志20150112
1、完成：(状态更新逻辑存在问题)
==============================================================
开发日志20150108
==============================================================
开发日志20150106
1、修正：当获得了shopId但是没有点击进入商店获取商店详细信息时，合成商店卡片数量由0改为-1；
2、修正：合成商店卡片数量为-1时，合成卡片列表长度过长。
3、完成：监控材料页面的物品状态列
4、完成：监控材料页面的卡片状态列
==============================================================
开发日志20150105
1、完成背包物品存储功能
2、在合成卡片页面应该增加商店信息
3、材料监控pop页面 展示信息
4、基本完成pop页面的信息显示，需要进一步测试，未完成物品来源和状态设置
==============================================================
开发日志20150104
2、监控卡片pop页面删除按钮增加页面动作。
1、监控卡片材料监控
设计：
1、获得背包材料信息
2、获得合成卡片材料信息
3、计算确实
4、获得合成卡片信息
流程：
pop页面从cfmod里面获得监控卡片数量
从bgdb中获得材料数量
并推送至csj存储在db中
在背包页面，更新数量。
pop页面读取数量。

3、背包物品记录
==============================================================
开发日志20141224
1、合成卡片的pop页面的监控设置功能
2、合成卡片pop页面的监控状态载入设置
3、合成材料提醒
==============================================================
开发日志20141224
1、日志模式为undefined
10、准备将代码放到github上
8、完成pop页面的展示
9、计算收集度
10、合成卡片监控
页面逻辑：
设置  监控 取消
设置：可以在pop页面设置监控；也可以在合成商店页面设置监控 done
更新：合成商店页面更新，卡片集合区域更新数量   done
取消：但监控卡片数量满5张时取消；展示层过滤并删除满5张卡片 done
合成材料监控：在背包页面，更新合成卡片材料。
合成材料商店提醒：在pop页面根据卡片材料提示
11、完成合成商店的监控信息 设置与卡片数量更新
12、完成pop配合的csj，设计pop页面
13、监控卡片删除的操作处理
14、完成卡片集合区的
==============================================================
开发日志20141222
1、继续优化pop_main结构
2、将pop_main页面的按钮流转功能，改为用页面跳转的方式。
3、将所有模块都调整为页面跳转方式，并且将port接口通讯方式进行优化。
==============================================================
开发日志20141216
1、优化pop_main结构
==============================================================
开发日志20141215
1、编写pop_craftProess页面
页面逻辑：
1、在每个合成商店 记录合成卡片的数量，并记录在csj db中
2、pop页面打开时，根据bg db中的数据 联合csj db中的数据 进行显示
问题：如果数量较多，那么是否会造成pop页面打开较慢【关注】
==============================================================
开发日志20141210
1、完成shopCardRS的数据补充
2、实现csj_mod_craftProcess文件
==============================================================
开发日志20141209
1、解决了少于5张卡片在商店页面的数量更新问题
7、设置开发模式的时候，显示bg数据库对象管理页面、
8、在数据对象管理页面，增加cls功能
2、完成合成商店卡片的数量信息记录。

从BG中获得商店列表，含shopid，计算商店数量 done
根据shopID 到BG中查询shopCard信息，计算卡片数量
根据shopId和CardId 到csj中核查卡片数量，统计卡片收集度
==============================================================
开发日志20141201
1、卡片相关的商店界面应当能够更新少于5张的卡片数量
9、卡片数量的相关界面，应当能够更新卡片的数量，并且更新少于5张的存储
==============================================================
开发日志20141127
1、清除满5张的卡片
2、完成csj_lessfivecard的获取
3、完成少于5张的pop页面，并使之在任何页面上可以看到
4、少于5张只在pop页面上显示了处于激活状态的少于5张的卡片
==============================================================
开发日志20141127
1、完成商店信息保存的bg问题
2、优化了合成物品的数据存储对象，结构增加了craftId
7、bg后台数据库关系功能
8、地图信息增强 暂停【暂停】
9、完成了背包物品按价格排序功能
10、将卡片解析的功能提升至main_tool之中，基于outframe来解析
11、增加了shop#card的数据对象信息
==============================================================
开发日志20141126
1、完成了csj_mod_mktInfoGet_m的脚步
2、优化main-msg的日志输出，调整为默认的debug模式，但是需要在产品发布时候时候将main-tools中的日志模式默认改为0【注意】
3、完成商店信息获取的bg存储
4、优化了bg-data的数据库存储逻辑，避免多次调用updateversion的时候出现问题。
5、测试了一下在职业设施上，csj_mod_mktInfoGet_c与csj_mod_mktInfoGet_m是通用的，所以取消了csj_mod_mktInfoGet_c
6、物品商店的信息获取，数据对象为：{"itemId":"","itemName":"","shopId":[],"itemCity":[]}
7、完成了物品商店、卡片商店的csj信息获取
8、完成合成卡片商店的获取
9、修改了bg-msg，使得onMessage能够异步返回请求
10、完成了csj_mod_mktInfoGet_s的整合，不需要根据shopId获取shopType来判断解析函数。
==============================================================
开发日志20141124
1、获取城市页面的相关信息，顶多获得pvp状态信息 data:"pvp打开"
2、城市页面bg保持机制
3、使用了bg-data提供总体的bg的数据存储方式
4、bg的数据存储不会跟mod绑定
设计：
1、商店信息分成了市场、商店、职业
2、商店类型分为直接购买型、合成商店类型、物品商店，里面有卡片的信息
3、数据对象：物品对象{id,...},卡片信息{id,...},合成材料（也算是物品），合成关系
==============================================================
开发日志20141114
1、初步完成mod-cig的消息通信功能，采用message方式与后台的bg通讯
2、修改main-msg模块使之能够适应func函数不设置的情况
==============================================================
开发日志20141113
1、采集页面的动态调整完成
2、自动训练完成
==============================================================
开发日志20141112
1、完成卡组排序功能 1、卡片筛选功能
２、记事本和多卡组需要更新init方法。
3、修改pop和popjs，正在修改csj
4、完成自动采集的页面想
==============================================================
开发日志20141111
1、优化卡组排序的存储逻辑
==============================================================
开发日志20141107
1、解决-用户名称获取逻辑可能有问题，main.js
2、修正了indexedb在保存时候的逻辑，应当分为add和update
3、完成note的存储逻辑
4、建立了initDB的工具方法
==============================================================
开发日志20141105
1、完善多卡组其他增删改卡组功能
2、解决多用户下卡组存储的逻辑问题，由于indexedb不能自动更新版本导致
4、pop_main的popframe需要处理出现滚动条和最大宽高的问题,
5、多卡组基本完成
==============================================================
开发日志20141103
1、基于indexeddb实现多卡组的卡组存储
2、初步测试多卡组的消息通信机制。
==============================================================
开发日志20141028
1、完成iframe的页面组合的调试
2、iframe可自动调整宽高
3、实现记事本功能
4、开始实现多卡组功能，已经建立pop与content之间的通信通道
==============================================================
开发日志20141027
1、基于权限控制pop页面组合,mainpop页面的按钮样式，还是采用iframe架构
2、建立pop页面与content脚本之间的通讯渠道
==============================================================
开发日志20141020
0、实验了iframe和ajax的方法，最后确认还是使用一次ajax都载入，然后使用tab页切换的方式来实现。
==============================================================
开发日志20141017
1、完成UrlToMOD的算法问题
2、完成getScriptByURL的方法
3、完成广告屏蔽功能
4、实验在popup页面中组合多个其他页面，用ajax方式可以实现，但是还需要优化
5、把bg和main.js划归到目录中。
==============================================================
开发日志20141016
1、如果两个bg文件都有消息通信的情况，该如何处理?
	实验结果：每个Listener都会收到消息，但需要进行消息类型的过滤
2、所以消息结果应该是这样的
	{type:,cmd:,data:,id:}
	var msg={"type":,"cmd":,"data":,"id":}
	var msg={"msg":{"type":"bg_conf","cmd":"url","data":cp,"id":""},"func":logMsg}
	type 应该是模块的名称，如bg_conf
	这样的话，每个bg文件都可以开放自己的消息通道
3、各模块的消息通道，根据mod配置 动态加载，由bg-msg载入
	/********************** 消息通讯区**********************/
	function bg_conf_MsgListener(msg, sender, sendResponse) {		
		var lsMsg="";
		// 根据url载入指定的content脚本，设置popup页面
		if (msg.cmd == "loadModByUrl"){
		}
	}
	/********************** 自动执行区**********************/
	RequestListener["bg_conf"]=bg_conf_MsgListener;

	各模块的消息模块函数明明规则为mod_ad_MsgListener(msg, sender, sendResponse)
4、增加bg-tools文件，用于存放公共函数
5、建立日志机制，支撑开发者模式
5、优化urltomod的算法
==============================================================
开发日志20141010
1、动态的bg.js文件载入
	特点如下：
	1、要注意bg文件的载入顺序
	2、声明式载入的都是框架所必须的bg.js文件
	3、mod的bg文件全部通过配置定义，动态载入
	4、在option保存时刷新bg.html页面
2、搭建main与bg之间的消息通道
3、如果mod里面的消息传输走自己的通道，框架的走框架的。
==============================================================
开发日志20141008
1、完成option配置页面改造
2、bg-conf选择配置与权限认证
==============================================================
开发日志20140929
新框架特性：
1、多bg.js文件【解决】
4、基于权限的集成化的popup.html页面【解决】
5、双向的bg与content的通讯机制【解决】框架使用请求应当方式与bg通讯，pop页面与content通信用port方式，content与bg通讯用msg方式

7、更合理的数据存储规划【未开发】考虑使用indexedDB技术
8、基础数据与用户数据分离【未开发】用户数据在本地用：USER_NAME+"#ModNote#record"; 在本地的插件数据 "LFE2#xxx#record";

9、插件的配置需要与bg形成沟通。调用自动刷新页面实现【解决】
==权限==
2、唯一权限控制与默认加入新权限,更合理的权限结构
3、更合理的content.js文件划分，更合理的目录结构【解决】
6、基于权限的页面多js文件注入【解决】
==功能==
1、单体功能 mod_XXX
2、功能组合 mod_XXX 同单体功能，但在url中会注入多个content.js
3、功能依赖 mod_XXX dept mod_XXX
4、功能配置 mod_XXX#yyyy
5、功能多样性 mod_XXX#yyyy
==功能对象==
{
mod:"",
modconf:{
	conf1:11,
	conf2:true
	},
dept:["mod_xxx",""],
urlist:[
	{
	url:"/sss/ss/"
	mt:false,
	js:["",""]
	pop:""
	},
	{
	url:"/sss/ss/"
	mt:true,
	js:["",""]
	pop:""
	}
]
}
